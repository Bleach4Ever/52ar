<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd 
	http://www.springframework.org/schema/util   
	http://www.springframework.org/schema/util/spring-util-3.1.xsd
	http://www.springframework.org/schema/mvc   
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
	
	<description>spring-datasources</description>
	
	<!-- dataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://192.168.100.101:3306/ysx_msg?useUnicode=true&amp;characterEncoding=utf8" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />
   	 	<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <property name="initialSize" value="1" />  
   	 	<!-- 最大连接池数量 -->
        <property name="maxActive" value="20" />  
   	 	<!-- 最小连接池数量 -->

        <property name="minIdle" value="10"/>
        <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 --> 
        <property name="maxWait" value="15000" />  
  
        <!-- 有两个含义：1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明  --> 
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 连接保持空闲而不被驱逐的最长时间  --> 
        <property name="minEvictableIdleTimeMillis" value="120000" />  
  
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 --> 
        <property name="validationQuery" value="select 1" />  
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 --> 
        <property name="testWhileIdle" value="true" />  
        <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 --> 
        <property name="testOnBorrow" value="true" />  
        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 --> 
        <property name="testOnReturn" value="false" />  
        
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false" />     
        <property name="maxPoolPreparedStatementPerConnectionSize" value="0"/>
        
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandonedTimeout" value="60" /> <!-- 60秒，也就是1分钟 -->  
        <property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->  
        
        <!-- 监控统计用的filter:stat  -->
        <property name="filters" value="stat" />  
	</bean>
	
	<!-- mybatis -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:conf/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:mappers/**/*.xml"/>
    </bean>
    
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ysx.w2ar.base.service"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean" />
    </bean>
	
	<!-- Transaction -->
	<tx:annotation-driven transaction-manager="tx" proxy-target-class="true"/>
	<bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	
</beans>
